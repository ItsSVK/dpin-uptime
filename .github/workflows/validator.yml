name: Validator Service CI/CD

on:
  push:
    branches: [main]
    paths:
      - 'apps/validator/**'
      - 'packages/**'
      - 'package.json'
      - 'bun.lockb'
      - '.github/workflows/validator.yml'
  pull_request:
    branches: [main]
    paths:
      - 'apps/validator/**'
      - 'packages/**'
      - 'package.json'
      - 'bun.lockb'
      - '.github/workflows/validator.yml'

env:
  SERVICE_NAME: validator
  DOCKERFILE_PATH: ./apps/validator/Dockerfile

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ env.DOCKERFILE_PATH }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/dpin-${{ env.SERVICE_NAME }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/dpin-${{ env.SERVICE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to Production Validators
        if: github.event_name != 'pull_request'
        env:
          DEPLOY_SSH_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          VALIDATOR_KEYS: ${{ secrets.VALIDATOR_KEYS }}
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          echo "$DEPLOY_SSH_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

          # Deploy to each validator server
          for HOST in ${{ vars.VALIDATOR_HOSTS }}; do
            echo "Deploying to validator host: $HOST"
            
            # Get private key from JSON map, ensuring we escape any special characters
            PRIVATE_KEY=$(echo "$VALIDATOR_KEYS" | jq -r --arg host "$HOST" '.[$host]' | sed 's/"/\\"/g')
            
            if [ "$PRIVATE_KEY" = "null" ]; then
              echo "❌ No private key found for host: $HOST"
              exit 1
            fi
            
            # Create a temporary script with the commands
            CONTAINER_NAME="dpin-${{ env.SERVICE_NAME }}-$(echo $HOST | cut -d. -f1)"
            IMAGE_TAG="${{ secrets.DOCKERHUB_USERNAME }}/dpin-${{ env.SERVICE_NAME }}:${{ github.sha }}"
            
            # Create deployment commands
            DEPLOY_CMD="docker pull ${IMAGE_TAG} && \
              docker stop ${CONTAINER_NAME} || true && \
              docker rm ${CONTAINER_NAME} || true && \
              docker run -d \
                --name ${CONTAINER_NAME} \
                --restart unless-stopped \
                --network dpin-network \
                -e PRIVATE_KEY='${PRIVATE_KEY}' \
                -e HUB_URL=${{ secrets.HUB_URL }} \
                --init \
                ${IMAGE_TAG} && \
              docker image prune -f"
            
            # Execute deployment commands
            ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $DEPLOY_USER@$HOST "${DEPLOY_CMD}"
            
            # Check if deployment was successful
            if [ $? -eq 0 ]; then
              echo "✅ Successfully deployed to $HOST"
            else
              echo "❌ Failed to deploy to $HOST"
              exit 1
            fi
          done
