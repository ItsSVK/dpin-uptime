// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @default(uuid())
  email String
}

model Website {
  id             String        @id @default(uuid())
  url            String
  userId         String
  ticks          WebsiteTick[]
  disabled       Boolean       @default(false)
  upSince        DateTime?
  lastCheckedAt  DateTime?
  checkFrequency Int           @default(3)
  isPaused       Boolean       @default(false)
}

model Validator {
  id               String        @id @default(uuid())
  publicKey        String
  country          String
  city             String
  latitude         Float
  longitude        Float
  ip               String
  pendingPayouts   Int           @default(0)
  processingPayout Boolean       @default(false)
  ticks            WebsiteTick[]
  transactions     Transaction[]
}

model WebsiteTick {
  id           String        @id @default(uuid())
  websiteId    String
  validatorId  String
  createdAt    DateTime
  status       WebsiteStatus
  nameLookup   Float
  connection   Float
  tlsHandshake Float
  dataTransfer Float
  ttfb         Float
  total        Float
  error        String
  website      Website       @relation(fields: [websiteId], references: [id])
  validator    Validator     @relation(fields: [validatorId], references: [id])
}

model Transaction {
  id              String            @id @default(uuid())
  signature       String
  status          TransactionStatus @default(Pending)
  retryCount      Int               @default(0)
  instructionData Json
  validatorId     String
  validator       Validator         @relation(fields: [validatorId], references: [id])
  amount          BigInt
  lastCheckedAt   DateTime?
  createdAt       DateTime          @default(now())
}

enum WebsiteStatus {
  GOOD
  BAD
  UNKNOWN
}

enum TransactionStatus {
  Pending
  Success
  Failure
}
