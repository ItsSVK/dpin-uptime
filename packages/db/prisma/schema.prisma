// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @default(uuid())
  email String
}

model Website {
  id               String        @id @default(uuid())
  name             String // Added name field for display
  url              String
  userId           String
  ticks            WebsiteTick[]
  status           WebsiteStatus @default(UNKNOWN) // Current status
  upSince          DateTime? // When the site came back online
  lastCheckedAt    DateTime? // Last monitoring check
  checkFrequency   Int           @default(60) // Check frequency in seconds
  isPaused         Boolean       @default(false)
  monitoringSince  DateTime      @default(now()) // When monitoring started
  uptimePercentage Float         @default(100) // Rolling uptime percentage
  averageResponse  Float? // Average response time in ms
  createdAt        DateTime      @default(now())
}

model Validator {
  id               String        @id @default(uuid())
  publicKey        String
  country          String
  city             String
  latitude         Float
  longitude        Float
  ip               String
  region           String
  pendingPayouts   Int           @default(0)
  processingPayout Boolean       @default(false)
  createdAt        DateTime      @default(now())
  ticks            WebsiteTick[]
  transactions     Transaction[]
}

model WebsiteTick {
  id           String        @id @default(uuid())
  websiteId    String
  validatorId  String
  createdAt    DateTime      @default(now())
  status       WebsiteStatus
  nameLookup   Float? // DNS lookup time
  connection   Float? // Connection time
  tlsHandshake Float? // TLS handshake time
  dataTransfer Float? // Data transfer time
  ttfb         Float? // Time to first byte
  total        Float? // Total response time in ms
  error        String? // Error message if any
  website      Website       @relation(fields: [websiteId], references: [id])
  validator    Validator     @relation(fields: [validatorId], references: [id])
}

model Transaction {
  id              String            @id @default(uuid())
  signature       String
  status          TransactionStatus @default(Pending)
  retryCount      Int               @default(0)
  instructionData Json
  validatorId     String
  validator       Validator         @relation(fields: [validatorId], references: [id])
  amount          BigInt
  lastCheckedAt   DateTime?
  createdAt       DateTime          @default(now())
}

enum WebsiteStatus {
  ONLINE // Site is up and running normally
  OFFLINE // Site is down
  DEGRADED // Site is up but performing poorly
  UNKNOWN // Status cannot be determined
}

enum TransactionStatus {
  Pending
  Success
  Failure
}
